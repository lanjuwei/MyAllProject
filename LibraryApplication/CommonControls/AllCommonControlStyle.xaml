<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:commonControls="clr-namespace:CommonControls"
                     xmlns:helpers="clr-namespace:CommonControls.Attach"
                    xmlns:converter1="clr-namespace:CommonControls.Converter"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">
    <converter1:CommonButtonPropertyConverter x:Key="CommonButtonPropertyConverter"></converter1:CommonButtonPropertyConverter>
    <!--通用Button-->
    <Style x:Key="CommonButtonStyle" TargetType="{x:Type commonControls:CommonButton}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Padding" Value="8,4"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type commonControls:CommonButton}">
                    <Grid x:Name="RootGrid" RenderTransformOrigin="0.5,0.5">
                        <Grid.RenderTransform>
                            <ScaleTransform></ScaleTransform>
                        </Grid.RenderTransform>
                        <Border x:Name="border" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" 
                                CornerRadius="{TemplateBinding CornerRadius}"
                                Opacity="{TemplateBinding Opacity}"
                                SnapsToDevicePixels="true">
                        </Border>
                        <StackPanel Orientation="{TemplateBinding StackPanelOrientation}" Margin="{TemplateBinding  Padding}" 
                                    VerticalAlignment="{TemplateBinding StackPanelVerticalAlignment}"
                                    HorizontalAlignment="{TemplateBinding StackPanelHorizontalAlignment}">
                            <Grid>
                                <Image x:Name="NormalImage" Source="{TemplateBinding  NormalImageSource}" Stretch="Uniform" 
                                       Width="{TemplateBinding ImageWidth}" Height="{TemplateBinding ImageHeight}" >
                                </Image>
                                <Image x:Name="SelectImage"  Stretch="Uniform" Visibility="Collapsed"
                                       Width="{TemplateBinding ImageWidth}" Height="{TemplateBinding ImageHeight}" Source="{TemplateBinding SelectImageSource}">
                                </Image>
                            </Grid>
                            <ContentPresenter x:Name="contentPresenter" 
                                              Focusable="False"  
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                              RecognizesAccessKey="True" 
                                              Margin="{TemplateBinding StackPanelMargin}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Converter={StaticResource CommonButtonPropertyConverter},ConverterParameter=MouseOverBackground}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Converter={StaticResource CommonButtonPropertyConverter},ConverterParameter=MouseOverBorderBrush}"/>
                            <Setter  Property="TextElement.Foreground" TargetName="contentPresenter"  Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Converter={StaticResource CommonButtonPropertyConverter},ConverterParameter=MouseOverForeground}"/>
                            <Setter Property="BorderThickness" TargetName="border" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Converter={StaticResource CommonButtonPropertyConverter},ConverterParameter=MouseOverThickness}"/>
                            <Setter TargetName="SelectImage" Property="Visibility" Value="Visible"></Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Converter={StaticResource CommonButtonPropertyConverter},ConverterParameter=PressedBackground}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Converter={StaticResource CommonButtonPropertyConverter},ConverterParameter=PressedBorderBrush}"/>
                            <Setter  Property="TextElement.Foreground" TargetName="contentPresenter" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Converter={StaticResource CommonButtonPropertyConverter},ConverterParameter=PressedForeground}"/>
                            <Setter Property="BorderThickness" TargetName="border" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Converter={StaticResource CommonButtonPropertyConverter},ConverterParameter=PressedThickness}"/>
                            <Setter TargetName="RootGrid" Property="RenderTransform">
                                <Setter.Value>
                                    <ScaleTransform  ScaleX="0.9" ScaleY="0.9"></ScaleTransform>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Converter={StaticResource CommonButtonPropertyConverter},ConverterParameter=DisabledBackground}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Converter={StaticResource CommonButtonPropertyConverter},ConverterParameter=DisabledBorderBrush}"/>
                            <Setter  Property="TextElement.Foreground" TargetName="contentPresenter" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Converter={StaticResource CommonButtonPropertyConverter},ConverterParameter=DisabledForeground}"/>
                            <Setter Property="BorderThickness" TargetName="border" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Converter={StaticResource CommonButtonPropertyConverter},ConverterParameter=DisabledThickness}"/>
                            <Setter  Property="Opacity" Value="0.7"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--通用CheckBox-->
    <converter1:CommonCheckBoxPropertyConverter x:Key="CommonCheckBoxPropertyConverter"></converter1:CommonCheckBoxPropertyConverter>
    <Style   TargetType="{x:Type commonControls:CommonCheckBox}">
        <Setter Property="Background" Value="#FFDDDDDD"/>
        <Setter Property="BorderBrush" Value="#FF707070"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type commonControls:CommonCheckBox}">
                    <Grid>
                        <Border x:Name="border" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" 
                                CornerRadius="{TemplateBinding CornerRadius}"
                                Opacity="{TemplateBinding Opacity}"
                                SnapsToDevicePixels="true">
                        </Border>
                        <StackPanel Orientation="{TemplateBinding StackPanelOrientation}" Margin="{TemplateBinding StackPanelMargin}" 
                                    VerticalAlignment="{TemplateBinding StackPanelVerticalAlignment}"
                                    HorizontalAlignment="{TemplateBinding StackPanelHorizontalAlignment}">
                            <Grid>
                                <Image x:Name="NormalImage" Source="{TemplateBinding  NormalImageSource}" Stretch="UniformToFill" 
                                       Width="{TemplateBinding ImageWidth}" Height="{TemplateBinding ImageHeight}" >
                                </Image>
                                <Image x:Name="SelectImage"  Stretch="UniformToFill" Visibility="Collapsed"
                                       Width="{TemplateBinding ImageWidth}" Height="{TemplateBinding ImageHeight}" Source="{TemplateBinding SelectImageSource}">
                                </Image>
                                <Image x:Name="CheckImage"  Stretch="UniformToFill" Visibility="Collapsed"
                                       Width="{TemplateBinding ImageWidth}" Height="{TemplateBinding ImageHeight}" Source="{TemplateBinding CheckImageSource}">
                                </Image>
                            </Grid>
                            <ContentPresenter x:Name="contentPresenter" 
                                              Focusable="False"  
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                              RecognizesAccessKey="True" 
                                              Margin="{TemplateBinding Padding}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Converter={StaticResource CommonCheckBoxPropertyConverter},ConverterParameter=MouseOverBackground}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Converter={StaticResource CommonCheckBoxPropertyConverter},ConverterParameter=MouseOverBorderBrush}"/>
                            <Setter  Property="TextElement.Foreground" TargetName="contentPresenter"  Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Converter={StaticResource CommonCheckBoxPropertyConverter},ConverterParameter=MouseOverForeground}"/>
                            <Setter Property="BorderThickness" TargetName="border" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Converter={StaticResource CommonCheckBoxPropertyConverter},ConverterParameter=MouseOverThickness}"/>
                            <Setter TargetName="SelectImage" Property="Visibility" Value="Visible"></Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Converter={StaticResource CommonCheckBoxPropertyConverter},ConverterParameter=PressedBackground}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Converter={StaticResource CommonCheckBoxPropertyConverter},ConverterParameter=PressedBorderBrush}"/>
                            <Setter  Property="TextElement.Foreground" TargetName="contentPresenter" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Converter={StaticResource CommonCheckBoxPropertyConverter},ConverterParameter=PressedForeground}"/>
                            <Setter Property="BorderThickness" TargetName="border" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Converter={StaticResource CommonCheckBoxPropertyConverter},ConverterParameter=PressedThickness}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Converter={StaticResource CommonCheckBoxPropertyConverter},ConverterParameter=DisabledBackground}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Converter={StaticResource CommonCheckBoxPropertyConverter},ConverterParameter=DisabledBorderBrush}"/>
                            <Setter  Property="TextElement.Foreground" TargetName="contentPresenter" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Converter={StaticResource CommonCheckBoxPropertyConverter},ConverterParameter=DisabledForeground}"/>
                            <Setter Property="BorderThickness" TargetName="border" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Converter={StaticResource CommonCheckBoxPropertyConverter},ConverterParameter=DisabledThickness}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Converter={StaticResource CommonCheckBoxPropertyConverter},ConverterParameter=CheckBackground}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Converter={StaticResource CommonCheckBoxPropertyConverter},ConverterParameter=CheckBorderBrush}"/>
                            <Setter  Property="TextElement.Foreground" TargetName="contentPresenter" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Converter={StaticResource CommonCheckBoxPropertyConverter},ConverterParameter=CheckForeground}"/>
                            <Setter Property="BorderThickness" TargetName="border" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Converter={StaticResource CommonCheckBoxPropertyConverter},ConverterParameter=CheckThickness}"/>
                            <Setter TargetName="CheckImage" Property="Visibility" Value="Visible"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <converter1:CommonListBoxPropertyConverter x:Key="CommonListBoxPropertyConverter"></converter1:CommonListBoxPropertyConverter>
    <Style  TargetType="{x:Type commonControls:CommonListBox}">
        <Setter Property="Background" Value="#FFFFFFFF"/>
        <Setter Property="BorderBrush" Value="#FFABADB3"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource CommonListBoxItemStyle}"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="1" SnapsToDevicePixels="true">
                        <ScrollViewer Focusable="false" Padding="{TemplateBinding Padding}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ListBox.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ListBox.Disabled.Border}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true"/>
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="Item.MouseOver.Background" Color="#1F26A0DA"/>
    <SolidColorBrush x:Key="Item.MouseOver.Border" Color="#a826A0Da"/>
    <SolidColorBrush x:Key="Item.SelectedInactive.Background" Color="#3DDADADA"/>
    <SolidColorBrush x:Key="Item.SelectedInactive.Border" Color="#FFDADADA"/>
    <SolidColorBrush x:Key="Item.SelectedActive.Background" Color="#3D26A0DA"/>
    <SolidColorBrush x:Key="Item.SelectedActive.Border" Color="#FF26A0DA"/>
    <Style x:Key="CommonListBoxItemStyle" TargetType="{x:Type ListBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="{Binding RelativeSource={RelativeSource AncestorType=ItemsControl },Path=ItemPadding,Converter={StaticResource CommonListBoxPropertyConverter}}"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType=ItemsControl },Path=NormalItemBackground,Converter={StaticResource CommonListBoxPropertyConverter}}"/>
        <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType=ItemsControl},Path=NormalItemBorderBrush,Converter={StaticResource CommonListBoxPropertyConverter}}"/>
        <Setter Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource AncestorType=ItemsControl },Path=NormalItemThickness,Converter={StaticResource CommonListBoxPropertyConverter}}"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Margin" Value="{Binding RelativeSource={RelativeSource AncestorType=ItemsControl },Path=ItemMargin,Converter={StaticResource CommonListBoxPropertyConverter}}"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Grid>
                        <Border x:Name="Bd" 
                                    CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=ItemsControl },Path=ItemCornerRadius,Converter={StaticResource CommonListBoxPropertyConverter}}"
                                    Opacity="{Binding RelativeSource={RelativeSource AncestorType=ItemsControl },Path=NormalItemOpacity,Converter={StaticResource CommonListBoxPropertyConverter}}" 
                                    BorderBrush="{TemplateBinding BorderBrush}" 
                                    BorderThickness="{TemplateBinding BorderThickness}" 
                                    Background="{TemplateBinding Background}"  
                                    SnapsToDevicePixels="true">
                        </Border>
                        <Border Padding="{TemplateBinding Padding}" CornerRadius="{Binding ElementName=Bd,Path=CornerRadius}">
                            <ContentPresenter 
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{Binding RelativeSource={RelativeSource AncestorType=ItemsControl },Converter={StaticResource CommonListBoxPropertyConverter},ConverterParameter=MouseOverItemBackground}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{Binding RelativeSource={RelativeSource AncestorType=ItemsControl },Converter={StaticResource CommonListBoxPropertyConverter},ConverterParameter=MouseOverItemBorderBrush}"/>
                            <Setter Property="BorderThickness" TargetName="Bd" Value="{Binding RelativeSource={RelativeSource AncestorType=ItemsControl },Converter={StaticResource CommonListBoxPropertyConverter},ConverterParameter=MouseOverItemThickness}"/>
                            <Setter Property="Opacity" TargetName="Bd" Value="{Binding RelativeSource={RelativeSource AncestorType=ItemsControl },Converter={StaticResource CommonListBoxPropertyConverter},ConverterParameter=MouseOverItemOpacity}"></Setter>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Border}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{Binding RelativeSource={RelativeSource AncestorType=ItemsControl },Converter={StaticResource CommonListBoxPropertyConverter},ConverterParameter=PressedItemBackground}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{Binding RelativeSource={RelativeSource AncestorType=ItemsControl },Converter={StaticResource CommonListBoxPropertyConverter},ConverterParameter=PressedItemBorderBrush}"/>
                            <Setter Property="BorderThickness" TargetName="Bd" Value="{Binding RelativeSource={RelativeSource AncestorType=ItemsControl },Converter={StaticResource CommonListBoxPropertyConverter},ConverterParameter=PressedItemThickness}"/>
                            <Setter Property="Opacity" TargetName="Bd" Value="{Binding RelativeSource={RelativeSource AncestorType=ItemsControl },Converter={StaticResource CommonListBoxPropertyConverter},ConverterParameter=PressedItemOpacity}"></Setter>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="#FF7EB4EA"/>
    <SolidColorBrush x:Key="TextBox.Focus.Border" Color="#FF569DE5"/>
    <Style x:Key="CommonTextBoxStyle" TargetType="{x:Type commonControls:WatermarkTextBox}">
        <Setter Property="BorderBrush" Value="#d8d8d8"></Setter>
        <Setter Property="BorderThickness" Value="1"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type commonControls:WatermarkTextBox}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"  SnapsToDevicePixels="True">
                        <Grid>
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="False" Margin="10,0" Opacity="0.8" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" />
                            <TextBlock x:Name="Message" FontSize="{TemplateBinding FontSize}" Focusable="False" Opacity="0.4" VerticalAlignment="Center" Foreground="LightGray" Margin="10,0,0,0" Text="{TemplateBinding WaterMark}" Visibility="Hidden"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                            <Setter TargetName="Message" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource TextBox.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource TextBox.Focus.Border}"/>
                            <Setter Property="BorderThickness" TargetName="Bd" Value="2"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PasswordBoxWithWaterMark" TargetType="PasswordBox">
        <Setter Property="BorderBrush" Value="#d8d8d8"></Setter>
        <Setter Property="BorderThickness" Value="1"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid>
                            <ScrollViewer x:Name="PART_ContentHost" Margin="10,0" Focusable="False" Opacity="0.8" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"  VerticalAlignment="Center"/>
                            <TextBlock x:Name="WaterMark" Focusable="False" Visibility="Collapsed" Margin="10,0" FontSize="{TemplateBinding FontSize}"
                                       Opacity="0.4" VerticalAlignment="Center" Foreground="LightGray"
                                               Text="{TemplateBinding Tag}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="helpers:MyPasswordBoxHelper.Password" Value="">
                            <Setter TargetName="WaterMark" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.Focus.Border}"/>
                            <Setter Property="BorderThickness" TargetName="border" Value="2"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MyBusyIndicatorStyle" TargetType="{x:Type commonControls:BusyIndicator}">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="OverlayStyle">
            <Setter.Value>
                <Style TargetType="Rectangle">
                    <Setter Property="Fill" Value="#FFFFFF" />
                    <Setter Property="Opacity" Value="0.7" />
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ProgressBarStyle">
            <Setter.Value>
                <Style TargetType="ProgressBar">
                    <Setter Property="Visibility" Value="Collapsed"></Setter>
                    <Setter Property="IsIndeterminate" Value="True" />
                    <Setter Property="Height" Value="15" />
                    <Setter Property="Margin" Value="8,0,8,8" />
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="DisplayAfter" Value="00:00:00.1" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type commonControls:BusyIndicator}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="VisibilityStates">
                                <VisualState x:Name="Hidden">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.001" Storyboard.TargetName="busycontent" Storyboard.TargetProperty="(UIElement.Visibility)">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Collapsed</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.001" Storyboard.TargetName="overlay" Storyboard.TargetProperty="(UIElement.Visibility)">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Collapsed</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Visible">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.001" Storyboard.TargetName="busycontent" Storyboard.TargetProperty="(UIElement.Visibility)">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.001" Storyboard.TargetName="overlay" Storyboard.TargetProperty="(UIElement.Visibility)">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="BusyStatusStates">
                                <VisualState x:Name="Idle">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.001" Storyboard.TargetName="content" Storyboard.TargetProperty="(Control.IsEnabled)">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <sys:Boolean>True</sys:Boolean>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Busy">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.001" Storyboard.TargetName="content" Storyboard.TargetProperty="(Control.IsEnabled)">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <sys:Boolean>False</sys:Boolean>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentControl x:Name="content" Content="{TemplateBinding Content}"  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"  Focusable="False" />
                        <Rectangle x:Name="overlay" Style="{TemplateBinding OverlayStyle}" />
                        <ContentPresenter x:Name="busycontent">
                            <ContentPresenter.Content>
                                <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <Border  BorderThickness="1" CornerRadius="2">
                                        <!--<Border.BorderBrush>
                                            <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                                <GradientStop Color="#FFA3AEB9" Offset="0" />
                                                <GradientStop Color="#FF8399A9" Offset="0.375" />
                                                <GradientStop Color="#FF718597" Offset="0.375" />
                                                <GradientStop Color="#FF617584" Offset="1" />
                                            </LinearGradientBrush>
                                        </Border.BorderBrush>-->
                                        <Border CornerRadius="1.5" Margin="1">
                                            <!--<Border.Background>
                                                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                                    <GradientStop Color="#FFF6F8F9" Offset="0.02" />
                                                    <GradientStop Color="#FFB8B8B8" Offset="0.996" />
                                                </LinearGradientBrush>
                                            </Border.Background>-->
                                            <Grid>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition />
                                                    <RowDefinition Height="Auto" />
                                                </Grid.RowDefinitions>
                                                <ContentPresenter Content="{TemplateBinding Animation}" ContentTemplate="{TemplateBinding BusyContentTemplate}" Margin="8" />
                                                <ContentControl Content="{TemplateBinding BusyContent}" FontSize="24" Margin="0 -150 0 0 " Opacity="0.6" Foreground="#000000" FontFamily="Microsoft YaHei"/>
                                                <ProgressBar Grid.Row="1" Style="{TemplateBinding ProgressBarStyle}" />
                                            </Grid>
                                        </Border>
                                    </Border>
                                </Grid>
                            </ContentPresenter.Content>
                        </ContentPresenter>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>